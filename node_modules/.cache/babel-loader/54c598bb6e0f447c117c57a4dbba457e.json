{"ast":null,"code":"var _jsxFileName = \"/Users/wubs/blackbeard/black-beard/src/Components/Dashboard/Sheets.js\";\nimport React, { Component } from \"react\";\nimport ReactGoogleSheets from \"react-google-sheets\";\n\nclass DataComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheetLoaded: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ReactGoogleSheets, {\n      clientId: YOUR_CLIENT_ID,\n      apiKey: YOUR_API_KEY,\n      spreadsheetId: YOUR_SPREADSHEET_ID,\n      afterLoading: () => this.setState({\n        sheetLoaded: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, this.state.sheetLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }, console.log(\"Your sheet data : \", this.props.getSheetsData({\n      YOUR_SPREADSHEET_NAME\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.props.updateCell(\"sheet02\", // sheetName\n        \"E\", // column\n        13, // row\n        \"Apple\", // value\n        null, // successCallback\n        error => {\n          console.log(\"error\", error);\n        } // errorCallback\n        );\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, \"update cell!\")) : \"loading...\");\n  }\n\n}\n\nexport default ReactGoogleSheets.connect(DataComponent);","map":{"version":3,"sources":["/Users/wubs/blackbeard/black-beard/src/Components/Dashboard/Sheets.js"],"names":["React","Component","ReactGoogleSheets","DataComponent","constructor","props","state","sheetLoaded","render","YOUR_CLIENT_ID","YOUR_API_KEY","YOUR_SPREADSHEET_ID","setState","console","log","getSheetsData","YOUR_SPREADSHEET_NAME","updateCell","error","connect"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACpCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,iBAAD;AACE,MAAA,QAAQ,EAAEC,cADZ;AAEE,MAAA,MAAM,EAAEC,YAFV;AAGE,MAAA,aAAa,EAAEC,mBAHjB;AAIE,MAAA,YAAY,EAAE,MAAM,KAAKC,QAAL,CAAc;AAAEL,QAAAA,WAAW,EAAE;AAAf,OAAd,CAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKD,KAAL,CAAWC,WAAX,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGM,OAAO,CAACC,GAAR,CACC,oBADD,EAEC,KAAKT,KAAL,CAAWU,aAAX,CAAyB;AAAEC,MAAAA;AAAF,KAAzB,CAFD,CAFH,eAOE;AACE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKX,KAAL,CAAWY,UAAX,CACE,SADF,EACa;AACX,WAFF,EAEO;AACL,UAHF,EAGM;AACJ,eAJF,EAIW;AACT,YALF,EAKQ;AACLC,QAAAA,KAAD,IAAW;AACTL,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,KAArB;AACD,SARH,CAQI;AARJ;AAUD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADD,GA0BC,YAhCJ,CADF;AAqCD;;AA7CmC;;AAgDtC,eAAehB,iBAAiB,CAACiB,OAAlB,CAA0BhB,aAA1B,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactGoogleSheets from \"react-google-sheets\";\n\nclass DataComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheetLoaded: false,\n    };\n  }\n  render() {\n    return (\n      <ReactGoogleSheets\n        clientId={YOUR_CLIENT_ID}\n        apiKey={YOUR_API_KEY}\n        spreadsheetId={YOUR_SPREADSHEET_ID}\n        afterLoading={() => this.setState({ sheetLoaded: true })}\n      >\n        {this.state.sheetLoaded ? (\n          <div>\n            {/* Access Data */}\n            {console.log(\n              \"Your sheet data : \",\n              this.props.getSheetsData({ YOUR_SPREADSHEET_NAME })\n            )}\n            {/* Update Data */}\n            <button\n              onClick={() => {\n                this.props.updateCell(\n                  \"sheet02\", // sheetName\n                  \"E\", // column\n                  13, // row\n                  \"Apple\", // value\n                  null, // successCallback\n                  (error) => {\n                    console.log(\"error\", error);\n                  } // errorCallback\n                );\n              }}\n            >\n              update cell!\n            </button>\n          </div>\n        ) : (\n          \"loading...\"\n        )}\n      </ReactGoogleSheets>\n    );\n  }\n}\n\nexport default ReactGoogleSheets.connect(DataComponent);\n"]},"metadata":{},"sourceType":"module"}